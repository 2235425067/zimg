// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: request.go
// DO NOT EDIT!

package common

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *ConvertParam) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ConvertParam) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if len(mj.Key) != 0 {
		buf.WriteString(`"key":`)
		fflib.WriteJsonString(buf, string(mj.Key))
		buf.WriteByte(',')
	}
	buf.WriteString(`"mode":`)
	fflib.FormatBits2(buf, uint64(mj.Mode), 10, false)
	buf.WriteString(`,"width":`)
	fflib.FormatBits2(buf, uint64(mj.Width), 10, false)
	buf.WriteString(`,"height":`)
	fflib.FormatBits2(buf, uint64(mj.Height), 10, false)
	buf.WriteByte(',')
	if mj.LongSide != 0 {
		buf.WriteString(`"long_side":`)
		fflib.FormatBits2(buf, uint64(mj.LongSide), 10, false)
		buf.WriteByte(',')
	}
	if mj.ShortSide != 0 {
		buf.WriteString(`"short_side":`)
		fflib.FormatBits2(buf, uint64(mj.ShortSide), 10, false)
		buf.WriteByte(',')
	}
	if mj.Gravity != 0 {
		buf.WriteString(`"gravity":`)
		fflib.FormatBits2(buf, uint64(mj.Gravity), 10, false)
		buf.WriteByte(',')
	}
	if mj.Angle != 0 {
		buf.WriteString(`"angle":`)
		fflib.AppendFloat(buf, float64(mj.Angle), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.RelativeX != 0 {
		buf.WriteString(`"relative_x":`)
		fflib.AppendFloat(buf, float64(mj.RelativeX), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.RelativeY != 0 {
		buf.WriteString(`"relative_y":`)
		fflib.AppendFloat(buf, float64(mj.RelativeY), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.RelativeW != 0 {
		buf.WriteString(`"relative_w":`)
		fflib.AppendFloat(buf, float64(mj.RelativeW), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.RelativeH != 0 {
		buf.WriteString(`"relative_h":`)
		fflib.AppendFloat(buf, float64(mj.RelativeH), 'g', -1, 64)
		buf.WriteByte(',')
	}
	buf.WriteString(`"format":`)
	fflib.WriteJsonString(buf, string(mj.Format))
	if mj.FormatOnly {
		buf.WriteString(`,"format_only":true`)
	} else {
		buf.WriteString(`,"format_only":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ConvertParambase = iota
	ffj_t_ConvertParamno_such_key

	ffj_t_ConvertParam_Key

	ffj_t_ConvertParam_Mode

	ffj_t_ConvertParam_Width

	ffj_t_ConvertParam_Height

	ffj_t_ConvertParam_LongSide

	ffj_t_ConvertParam_ShortSide

	ffj_t_ConvertParam_Gravity

	ffj_t_ConvertParam_Angle

	ffj_t_ConvertParam_RelativeX

	ffj_t_ConvertParam_RelativeY

	ffj_t_ConvertParam_RelativeW

	ffj_t_ConvertParam_RelativeH

	ffj_t_ConvertParam_Format

	ffj_t_ConvertParam_FormatOnly
)

var ffj_key_ConvertParam_Key = []byte("key")

var ffj_key_ConvertParam_Mode = []byte("mode")

var ffj_key_ConvertParam_Width = []byte("width")

var ffj_key_ConvertParam_Height = []byte("height")

var ffj_key_ConvertParam_LongSide = []byte("long_side")

var ffj_key_ConvertParam_ShortSide = []byte("short_side")

var ffj_key_ConvertParam_Gravity = []byte("gravity")

var ffj_key_ConvertParam_Angle = []byte("angle")

var ffj_key_ConvertParam_RelativeX = []byte("relative_x")

var ffj_key_ConvertParam_RelativeY = []byte("relative_y")

var ffj_key_ConvertParam_RelativeW = []byte("relative_w")

var ffj_key_ConvertParam_RelativeH = []byte("relative_h")

var ffj_key_ConvertParam_Format = []byte("format")

var ffj_key_ConvertParam_FormatOnly = []byte("format_only")

func (uj *ConvertParam) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ConvertParam) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ConvertParambase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ConvertParamno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_ConvertParam_Angle, kn) {
						currentKey = ffj_t_ConvertParam_Angle
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_ConvertParam_Format, kn) {
						currentKey = ffj_t_ConvertParam_Format
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ConvertParam_FormatOnly, kn) {
						currentKey = ffj_t_ConvertParam_FormatOnly
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_ConvertParam_Gravity, kn) {
						currentKey = ffj_t_ConvertParam_Gravity
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_ConvertParam_Height, kn) {
						currentKey = ffj_t_ConvertParam_Height
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_ConvertParam_Key, kn) {
						currentKey = ffj_t_ConvertParam_Key
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_ConvertParam_LongSide, kn) {
						currentKey = ffj_t_ConvertParam_LongSide
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_ConvertParam_Mode, kn) {
						currentKey = ffj_t_ConvertParam_Mode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_ConvertParam_RelativeX, kn) {
						currentKey = ffj_t_ConvertParam_RelativeX
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ConvertParam_RelativeY, kn) {
						currentKey = ffj_t_ConvertParam_RelativeY
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ConvertParam_RelativeW, kn) {
						currentKey = ffj_t_ConvertParam_RelativeW
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ConvertParam_RelativeH, kn) {
						currentKey = ffj_t_ConvertParam_RelativeH
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_ConvertParam_ShortSide, kn) {
						currentKey = ffj_t_ConvertParam_ShortSide
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffj_key_ConvertParam_Width, kn) {
						currentKey = ffj_t_ConvertParam_Width
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_ConvertParam_FormatOnly, kn) {
					currentKey = ffj_t_ConvertParam_FormatOnly
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Format, kn) {
					currentKey = ffj_t_ConvertParam_Format
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ConvertParam_RelativeH, kn) {
					currentKey = ffj_t_ConvertParam_RelativeH
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ConvertParam_RelativeW, kn) {
					currentKey = ffj_t_ConvertParam_RelativeW
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ConvertParam_RelativeY, kn) {
					currentKey = ffj_t_ConvertParam_RelativeY
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ConvertParam_RelativeX, kn) {
					currentKey = ffj_t_ConvertParam_RelativeX
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Angle, kn) {
					currentKey = ffj_t_ConvertParam_Angle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Gravity, kn) {
					currentKey = ffj_t_ConvertParam_Gravity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ConvertParam_ShortSide, kn) {
					currentKey = ffj_t_ConvertParam_ShortSide
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ConvertParam_LongSide, kn) {
					currentKey = ffj_t_ConvertParam_LongSide
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Height, kn) {
					currentKey = ffj_t_ConvertParam_Height
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Width, kn) {
					currentKey = ffj_t_ConvertParam_Width
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ConvertParam_Mode, kn) {
					currentKey = ffj_t_ConvertParam_Mode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ConvertParam_Key, kn) {
					currentKey = ffj_t_ConvertParam_Key
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ConvertParamno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ConvertParam_Key:
					goto handle_Key

				case ffj_t_ConvertParam_Mode:
					goto handle_Mode

				case ffj_t_ConvertParam_Width:
					goto handle_Width

				case ffj_t_ConvertParam_Height:
					goto handle_Height

				case ffj_t_ConvertParam_LongSide:
					goto handle_LongSide

				case ffj_t_ConvertParam_ShortSide:
					goto handle_ShortSide

				case ffj_t_ConvertParam_Gravity:
					goto handle_Gravity

				case ffj_t_ConvertParam_Angle:
					goto handle_Angle

				case ffj_t_ConvertParam_RelativeX:
					goto handle_RelativeX

				case ffj_t_ConvertParam_RelativeY:
					goto handle_RelativeY

				case ffj_t_ConvertParam_RelativeW:
					goto handle_RelativeW

				case ffj_t_ConvertParam_RelativeH:
					goto handle_RelativeH

				case ffj_t_ConvertParam_Format:
					goto handle_Format

				case ffj_t_ConvertParam_FormatOnly:
					goto handle_FormatOnly

				case ffj_t_ConvertParamno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Key:

	/* handler: uj.Key type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Key = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Mode:

	/* handler: uj.Mode type=common.ConvertModeType kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ConvertModeType", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Mode = ConvertModeType(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Width:

	/* handler: uj.Width type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Width = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Height:

	/* handler: uj.Height type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Height = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LongSide:

	/* handler: uj.LongSide type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LongSide = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ShortSide:

	/* handler: uj.ShortSide type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ShortSide = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Gravity:

	/* handler: uj.Gravity type=common.GravityType kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for GravityType", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Gravity = GravityType(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Angle:

	/* handler: uj.Angle type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Angle = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RelativeX:

	/* handler: uj.RelativeX type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RelativeX = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RelativeY:

	/* handler: uj.RelativeY type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RelativeY = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RelativeW:

	/* handler: uj.RelativeW type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RelativeW = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RelativeH:

	/* handler: uj.RelativeH type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RelativeH = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Format:

	/* handler: uj.Format type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Format = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatOnly:

	/* handler: uj.FormatOnly type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.FormatOnly = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.FormatOnly = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *ImageResult) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ImageResult) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "key":`)
	fflib.WriteJsonString(buf, string(mj.Key))
	buf.WriteString(`,"format":`)
	fflib.WriteJsonString(buf, string(mj.Format))
	buf.WriteByte(',')
	if mj.MTime != 0 {
		buf.WriteString(`"mtime":`)
		fflib.FormatBits2(buf, uint64(mj.MTime), 10, mj.MTime < 0)
		buf.WriteByte(',')
	}
	if mj.Width != 0 {
		buf.WriteString(`"width":`)
		fflib.FormatBits2(buf, uint64(mj.Width), 10, false)
		buf.WriteByte(',')
	}
	if mj.Height != 0 {
		buf.WriteString(`"height":`)
		fflib.FormatBits2(buf, uint64(mj.Height), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Thumbs) != 0 {
		if mj.Thumbs == nil {
			buf.WriteString(`"thumbs":null`)
		} else {
			buf.WriteString(`"thumbs":{ `)
			for key, value := range mj.Thumbs {
				fflib.WriteJsonString(buf, key)
				buf.WriteString(`:`)
				fflib.WriteJsonString(buf, string(value))
				buf.WriteByte(',')
			}
			buf.Rewind(1)
			buf.WriteByte('}')
		}
		buf.WriteByte(',')
	}
	if len(mj.Properties) != 0 {
		if mj.Properties == nil {
			buf.WriteString(`"properties":null`)
		} else {
			buf.WriteString(`"properties":{ `)
			for key, value := range mj.Properties {
				fflib.WriteJsonString(buf, key)
				buf.WriteString(`:`)
				fflib.WriteJsonString(buf, string(value))
				buf.WriteByte(',')
			}
			buf.Rewind(1)
			buf.WriteByte('}')
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ImageResultbase = iota
	ffj_t_ImageResultno_such_key

	ffj_t_ImageResult_Key

	ffj_t_ImageResult_Format

	ffj_t_ImageResult_MTime

	ffj_t_ImageResult_Width

	ffj_t_ImageResult_Height

	ffj_t_ImageResult_Thumbs

	ffj_t_ImageResult_Properties
)

var ffj_key_ImageResult_Key = []byte("key")

var ffj_key_ImageResult_Format = []byte("format")

var ffj_key_ImageResult_MTime = []byte("mtime")

var ffj_key_ImageResult_Width = []byte("width")

var ffj_key_ImageResult_Height = []byte("height")

var ffj_key_ImageResult_Thumbs = []byte("thumbs")

var ffj_key_ImageResult_Properties = []byte("properties")

func (uj *ImageResult) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ImageResult) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ImageResultbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ImageResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'f':

					if bytes.Equal(ffj_key_ImageResult_Format, kn) {
						currentKey = ffj_t_ImageResult_Format
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_ImageResult_Height, kn) {
						currentKey = ffj_t_ImageResult_Height
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_ImageResult_Key, kn) {
						currentKey = ffj_t_ImageResult_Key
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_ImageResult_MTime, kn) {
						currentKey = ffj_t_ImageResult_MTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_ImageResult_Properties, kn) {
						currentKey = ffj_t_ImageResult_Properties
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_ImageResult_Thumbs, kn) {
						currentKey = ffj_t_ImageResult_Thumbs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffj_key_ImageResult_Width, kn) {
						currentKey = ffj_t_ImageResult_Width
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_ImageResult_Properties, kn) {
					currentKey = ffj_t_ImageResult_Properties
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ImageResult_Thumbs, kn) {
					currentKey = ffj_t_ImageResult_Thumbs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ImageResult_Height, kn) {
					currentKey = ffj_t_ImageResult_Height
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ImageResult_Width, kn) {
					currentKey = ffj_t_ImageResult_Width
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ImageResult_MTime, kn) {
					currentKey = ffj_t_ImageResult_MTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ImageResult_Format, kn) {
					currentKey = ffj_t_ImageResult_Format
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ImageResult_Key, kn) {
					currentKey = ffj_t_ImageResult_Key
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ImageResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ImageResult_Key:
					goto handle_Key

				case ffj_t_ImageResult_Format:
					goto handle_Format

				case ffj_t_ImageResult_MTime:
					goto handle_MTime

				case ffj_t_ImageResult_Width:
					goto handle_Width

				case ffj_t_ImageResult_Height:
					goto handle_Height

				case ffj_t_ImageResult_Thumbs:
					goto handle_Thumbs

				case ffj_t_ImageResult_Properties:
					goto handle_Properties

				case ffj_t_ImageResultno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Key:

	/* handler: uj.Key type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Key = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Format:

	/* handler: uj.Format type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Format = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MTime:

	/* handler: uj.MTime type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MTime = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Width:

	/* handler: uj.Width type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Width = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Height:

	/* handler: uj.Height type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Height = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Thumbs:

	/* handler: uj.Thumbs type=map[string]string kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Thumbs = nil
		} else {

			uj.Thumbs = make(map[string]string, 0)

			wantVal := true

			for {

				var k string

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						k = string(string(outBuf))

					}
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Thumbs[k] = v

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Properties:

	/* handler: uj.Properties type=common.Property kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Property", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Properties = nil
		} else {

			uj.Properties = make(map[string]string, 0)

			wantVal := true

			for {

				var k string

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						k = string(string(outBuf))

					}
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Properties[k] = v

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *ObjectResult) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ObjectResult) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"key":`)
	fflib.WriteJsonString(buf, string(mj.Key))
	buf.WriteString(`,"mtime":`)
	fflib.FormatBits2(buf, uint64(mj.MTime), 10, mj.MTime < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ObjectResultbase = iota
	ffj_t_ObjectResultno_such_key

	ffj_t_ObjectResult_Key

	ffj_t_ObjectResult_MTime
)

var ffj_key_ObjectResult_Key = []byte("key")

var ffj_key_ObjectResult_MTime = []byte("mtime")

func (uj *ObjectResult) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ObjectResult) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ObjectResultbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ObjectResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'k':

					if bytes.Equal(ffj_key_ObjectResult_Key, kn) {
						currentKey = ffj_t_ObjectResult_Key
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_ObjectResult_MTime, kn) {
						currentKey = ffj_t_ObjectResult_MTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_ObjectResult_MTime, kn) {
					currentKey = ffj_t_ObjectResult_MTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ObjectResult_Key, kn) {
					currentKey = ffj_t_ObjectResult_Key
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ObjectResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ObjectResult_Key:
					goto handle_Key

				case ffj_t_ObjectResult_MTime:
					goto handle_MTime

				case ffj_t_ObjectResultno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Key:

	/* handler: uj.Key type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Key = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MTime:

	/* handler: uj.MTime type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MTime = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
